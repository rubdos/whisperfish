---
variables: &variables
  SFOS_VERSION: 3.4.0.24
  CARGO_HOME: $CI_PROJECT_DIR/cargo

stages:
  - build
  - test
  - deploy

.build-target: &build-target
  image: registry.gitlab.com/rubdos/sailo-rs/platform-$MER_ARCH-$SFOS_VERSION:master
  stage: build
  artifacts:
    paths:
      - target/*/release/rpmbuild/RPMS/*/*.rpm
  cache:
    paths:
      - target
      - $CARGO_HOME/bin/
      - $CARGO_HOME/registry/index/
      - $CARGO_HOME/registry/cache/
      - $CARGO_HOME/git/db/
    key:
      files:
        - Cargo.lock
      prefix: target-$MER_ARCH
  script:
    - mkdir -p $CARGO_HOME
    - cp .ci/cargo.toml $CARGO_HOME/config
    - echo "Building for $SFOS_VERSION"
    - echo "Configuring cargo-rpm (cfr https://gitlab.com/rubdos/whisperfish/-/issues/24)"
    - sed -ie "s/armv7hl/$MER_ARCH/" Cargo.toml
    - cat Cargo.toml
    - export MER_TARGET="SailfishOS-$SFOS_VERSION"
    - export RUSTFLAGS="-C link-args=-Wl,-lcrypto,-rpath-link,$MERSDK/targets/$MER_TARGET-$MER_ARCH/usr/lib64/,-rpath-link,$MERSDK/targets/$MER_TARGET-$MER_ARCH/usr/lib/,-rpath-link,$MERSDK/targets/$MER_TARGET-$MER_ARCH/lib/,-rpath-link,$MERSDK/targets/$MER_TARGET-$MER_ARCH/lib64/"
    - cargo rpm build --verbose --target $RUST_ARCH

build:armv7hl:
  variables:
    <<: *variables
    MER_ARCH: armv7hl
    RUST_ARCH: armv7-unknown-linux-gnueabihf
    CC_armv7_unknown_linux_gnueabihf: arm-linux-gnueabihf-gcc
    CXX_armv7_unknown_linux_gnueabihf: arm-linux-gnueabihf-g++
  <<: *build-target

build:i486:
  variables:
    <<: *variables
    MER_ARCH: i486
    RUST_ARCH: i686-unknown-linux-gnu
    CC_i686_unknown_linux_gnu: i686-linux-gnu-gcc
    CXX_i686_unknown_linux_gnu: i686-linux-gnu-g++
  <<: *build-target

build:aarch64:
  variables:
    <<: *variables
    MER_ARCH: aarch64
    RUST_ARCH: aarch64-unknown-linux-gnu
    CC_aarch64_unknown_linux_gnueabihf: aarch64-linux-gnu-gcc
    CXX_aarch64_unknown_linux_gnueabihf: aarch64-linux-gnu-g++
  <<: *build-target

.rust: &rust
  cache: &rust-cache
    paths:
      - target/
      - $CARGO_HOME/bin/
      - $CARGO_HOME/registry/index/
      - $CARGO_HOME/registry/cache/
      - $CARGO_HOME/git/db/
  before_script:
    - apt-get update
    - apt-get install -y libsqlcipher-dev qtbase5-dev qt5-qmake cmake qtdeclarative5-dev qt5-default protobuf-compiler
    - cargo --version
    - rustc --version

.rust-stable: &rust-stable
  <<: *rust
  image: rust
  cache:
    <<: *rust-cache
    key:
      files:
        - Cargo.lock
      prefix: rust-stable

.rust-nightly: &rust-nightly
  <<: *rust
  image: rustlang/rust:nightly
  allow_failure: true
  cache:
    <<: *rust-cache
    key:
      files:
        - Cargo.lock
      prefix: rust-stable

build:host:stable:
  <<: *rust-stable
  stage: build
  needs: []
  script:
    - cargo build
    - cargo build --release

build:host:nightly:
  <<: *rust-nightly
  stage: build
  needs: []
  script:
    - cargo build
    - cargo build --release

build:host:nightly:docs:
  <<: *rust-nightly
  stage: build
  needs: []
  script:
    - cargo doc --no-deps -p harbour-whisperfish -p libsignal-service -p libsignal-protocol --document-private-items
  artifacts:
    paths:
      - target/doc

qmllint:
  <<: *rust
  stage: test
  image: rust
  cache: {}
  script:
    - "qmllint qml/**/*.qml"

test:stable:
  <<: *rust-stable
  stage: test
  needs: []
  script:
    - cargo test
    - cargo test --release

test:nightly:
  <<: *rust-nightly
  stage: test
  needs: []
  script:
    - cargo test
    - cargo test --release

fmt:nightly:
  <<: *rust-nightly
  stage: test
  needs: []
  script:
    - cargo fmt -- --check

coverage:nightly:
  <<: *rust-nightly
  image: xd009642/tarpaulin:develop-nightly
  stage: test
  needs: []
  script:
    - export PATH="$CARGO_HOME/bin:$PATH"
    - cargo tarpaulin -v --exclude-files cargo/*

clippy:
  <<: *rust-nightly
  stage: test
  needs: []
  allow_failure: true
  script:
    - rustup component add clippy
    - cargo clippy

translations:
  image: debian
  stage: test
  needs: []
  before_script:
    - apt-get update
    - apt-get install --no-install-recommends -y git qttools5-dev-tools qt5-default python3 python3-requests
  script:
    - lupdate qml/ -ts translations/*.ts
    - '[ "$CI_COMMIT_REF_NAME" == "master" ] && python3 .ci/update-translation-badge.py'
    - git diff --exit-code

pages:
  dependencies:
    - build:host:nightly:docs
  needs:
    - build:host:nightly:docs
  stage: deploy
  only:
    - master
  script:
    - mkdir -p public
    - mv target/doc public/
  artifacts:
    paths:
      - public

# Awesome OpenRepos script by @nobodyinperson/Yann BÃ¼chau
include:
  - https://gitlab.com/nobodyinperson/python3-openrepos-webclient/-/raw/master/openrepos-upload-rpm.gitlab-ci.yml

openrepos-deploy:
  stage: deploy
  extends: .openrepos-upload-rpm
  variables:
    OPENREPOS_UPLOAD_RPM_APPNAME:  Whisperfish
    OPENREPOS_UPLOAD_RPM_PLATFORM: SailfishOS
    OPENREPOS_UPLOAD_RPM_CATEGORY: Applications
    OPENREPOS_VERBOSITY: 5
  environment:
      name: OpenRepos
      url: https://openrepos.net/content/rubdos/whisperfish
  before_script:
    - mv target/armv7-unknown-linux-gnueabihf/release/rpmbuild/RPMS/armv7hl/*.rpm .
    - mv target/i686-unknown-linux-gnu/release/rpmbuild/RPMS/i486/*.rpm .
    - mv target/aarch64-unknown-linux-gnu/release/rpmbuild/RPMS/aarch64/*.rpm  .
    - ls *.rpm
  needs:
    - build:armv7hl
    - build:i486
    - build:aarch64
    - test:nightly
  dependencies:
    - build:armv7hl
    - build:i486
    - build:aarch64
  only:
    - tags

dry-run:triage:
  stage: test
  image: ruby:2.4
  script:
    - gem install gitlab-triage
    - gitlab-triage --help
    - gitlab-triage --dry-run --token $PRIVATE_TOKEN --source projects --source-id $CI_PROJECT_PATH
  when: manual
  except:
    - schedules

policy:run:
  stage: deploy
  image: ruby:2.4
  script:
    - gem install gitlab-triage
    - gitlab-triage --token $PRIVATE_TOKEN --source projects --source-id $CI_PROJECT_PATH
  when: manual
  except:
    - schedules

schedule:policyrun:
  stage: deploy
  image: ruby:2.4
  script:
    - gem install gitlab-triage
    - gitlab-triage --token $PRIVATE_TOKEN --source projects --source-id $CI_PROJECT_PATH
  only:
    - schedules
